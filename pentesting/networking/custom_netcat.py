#! /usr/bin/env python

import sys
import socket
import getopt
import threading
import subprocess

#global vars needed after
listen = False
command = False
upload = False
execute = ""
target = ""
upload_destination = ""
port = 0

def usage():
    print "Frattazcat Net Tool"
    print
    print "Usage: frattazcat.py -t target_host -p port"
    print
    print "-l --listen              - listen on [host]:[port] for incoming connections"
    print "-e --execute=file_to_run - execute the given file upon receiving a connection"
    print "-c --command             - initialize a command shell"
    print "-u --upload=destination  - upon receiving a connection upload a file and write to [destination]"
    print
    print
    print "cli examples:"
    print "frattazcat.py -t 192.168.0.1 -p 6666 -l -c"
    print "frattazcat.py -t 192.168.0.1 -p 6666 -l -u=c:\\target.exe"
    print "frattazcat.py -t 192.168.0.1 -p 6666 -l -e=\"cat /etc/passwd\""
    print "echo 'OHAIGUSY!' | ./frattazcat.py -t 192.168.0.1 -p 135"
    sys.exit(0)

def server_loop():
    global target
    
    #if not target, listen on all intrfcs
    if not len(target):
        target = "0.0.0.0"
    
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target, port))
    
    server.listen(5)
    
    while True:
        client_socket, addr = server.accept()
        
        #spn off a thread to handle our new client        
        client_thread = threading.Thread(target=client_handler,
                                         args=(client_socket,))
        client_thread.start()
        

def client_sender(buffer):
    
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        
        #here we connect to target
        client.connect((target,port))
        
        if len(buffer):
            client.send(buffer)
            
        while True:
            
            #let's wait data back
            recv_len = 1
            response = ""
            
            while recv_len:
                
                data = client.recv(4096)
                recv_len = len(data)
                response += data
                
                if recv_len < 4096:
                    break
                
            print response,
            
            #wait moar input
            buffer = raw_input("")
            buffer += "\n"
            
            #sendoff
            client.send(buffer)
            
    
    except:
        print "[*]Exception ! foera de bal"
        
        #ragequit connection
        client.close()
        
def run_command(command):
    
    #trim newline
    command = command.rstrip()
    
    
    #run command and get output back
    
    try:
        output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=True)
    except:
        output = "Failed to execute! OMG! \r \n"
        
    #send output back to client
    return output


def client_handler(client_socket):
    global upload
    global execute
    global command
    
    
    #look for upload
    if len(upload_destination):
        
        #read in all bytes(unsure of this**doublecheck**) and write to destinaion
        file_buffer = ""
        
        #keep reading data until none left
        while True:
            data = client_socket.recv(1024)
            
            if not data:
                break
            else:
                file_buffer += data
        #now we take these bytes and try to write 'em out
        try:
            file_descriptor = open(upload_destination, "wb")
            file_descriptor.write(file_buffer)
            file_descriptor.close()
            
            #ack taht we wrote the file
            client_socket.send("Successfully saved file to %s \r \n" %upload_destination)
            
        except: 
            client_socket.send("OMG save failed! Execute order 66!")
            
    #check for command execution
    if len(execute):
        
        #run commadn
        output = run_command(execute)
        
        client_socket.send(output)
    #now going in another loop if a shell was requested
    if command:
        while True:
            #show simple prompt
            client_socket.send("<FratCat:#>")
            
            #now we receive until a linefeed (enter)
            cmd_buffer = ""
            while "\n" not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024)
            
            #send back the command output
            response = run_command(cmd_buffer)
            
            
            #send back te response
            client_socket.send(response)

def main():
    global listen
    global port
    global execute
    global command
    global upload_destination
    global target
    
    if not len(sys.argv[1:]):
        usage()
        
    #read the cli options
    try:
        opts, args = getopt.getopt(sys.argv[1:],"hle:t:p:cu",["help", "listen", "execute", "target", "port", "command", "upload"])
    except getopt.GetoptError as err:
            print  str(err)
            usage()
    
    for o,a in opts:
        if o in ("-h", "--help"):
            usage()
        elif o in ("-l", "--listen"):
            listen = True
        elif o in ("-e", "--execute"):
            execute = a
        elif o in ("-c", "--commandshell"):
            command = True
        elif o in ("-u", "--upload"):
            upload_destionation = a
        elif o in ("-t", "--target"):
            target = a
        elif o in ("-p", "--port"):
            port = int(a)
        else:
            assert False, "Wrong opt(s), check again --help!"
    #listen or send from stdin?
    if not listen and len(target) and port > 0:
        #read buffer from commandline
        #this will block, so skip with ctrl-d if not sending input
        #to stdin
        buffer = sys.stdin.read()
        
        #shoot data off
        client_sender(buffer)
        
        #we are going to listen and potentially
        #upload stuff, execute commands, and drop a shell back
        #depending on cli options above
    if listen:
        server_loop()
main()

